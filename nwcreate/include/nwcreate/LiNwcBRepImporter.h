/**
 * \file
 *
 * Imports B-rep entities from external data.
 *
 * Supports ACIS and Parasolid binary data.
 */

/*
 * Copyright Notice:
 *
 * Copyright 2008 Autodesk, Inc.  All rights reserved.
 *
 * This computer source code and related instructions and
 * comments are the unpublished confidential and proprietary
 * information of Autodesk, Inc. and are protected under
 * United States and foreign intellectual property laws.
 * They may not be disclosed to, copied or used by any third
 * party without the prior written consent of Autodesk, Inc.
 *
 */

#ifndef LINWCBREPIMPORTER_HDR
#define LINWCBREPIMPORTER_HDR
#pragma once

#include <nwcreate/LiNwcTypes.h>
#include <nwcreate/LiNwcNode.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Types of format supported by the B-rep importer.
 *
 * \version 7.0
 */
typedef enum LtNwcBRepFormat_tag {
   LI_NWC_BREP_FORMAT_PS_BINARY,
   LI_NWC_BREP_FORMAT_ASM_BINARY,
   LI_NWC_BREP_FORMAT_ASM_TEXT
} LtNwcBRepFormat;

/**
 * Flags to control B-rep import.
 *
 * \version 7.0
 */
typedef enum LtNwcBRepImportFlags_tag {
   LI_NWC_BREP_IMPORT_PS_NODE_IDS         = 0x01,  /** Import Parasolid node IDs. */
} LtNwcBRepImportFlags;

/**
 * B-rep importing result codes.
 *
 * \version 7.0
 */
typedef enum LtNwcBRepImportResult_tag {
   LI_NWC_BREP_IMPORT_OK,              /** Import was successful. */
   LI_NWC_BREP_IMPORT_DATA_CORRUPT,    /** Data was corrupt. */
   LI_NWC_BREP_IMPORT_NO_ENTITIES,     /** No entities found. */
   LI_NWC_BREP_IMPORT_CANT_READ,       /** Can't read data file. */
   LI_NWC_BREP_IMPORT_CANT_CONVERT,    /** Failed to convert to external format. */
   LI_NWC_BREP_IMPORT_FAILED,          /** Import failed for some reason. */
} LtNwcBRepImportResult;

/**
 * Create a new B-rep importer for a given data format.
 *
 * \param format Format of B-rep data to import.
 * \return B-rep importer object.
 * \version 7.0
 */
LI_NWC_PUBLIC LtNwcBRepImporter LI_NWC_API
LiNwcBRepImporterCreate(LtNwcBRepFormat format);

/**
 * Sets a scale factor for the importer to apply during import.
 *
 * \param importer Importer to set scale on.
 * \param scale Scale factor to apply to imported objects.
 * \version 7.0
 */
LI_NWC_PUBLIC void LI_NWC_API
LiNwcBRepImporterSetScale(LtNwcBRepImporter importer,
                          LtFloat scale);

/**
 * Sets the flags that control B-rep import. Some flags are
 * only applicable for specific data formats.
 *
 * \param importer Importer to set flags on.
 * \param flags Flags to set.
 * \version 7.0
 */
LI_NWC_PUBLIC void LI_NWC_API
LiNwcBRepImporterSetFlags(LtNwcBRepImporter importer,
                          LtInt32 flags);

/**
 * Import B-rep data.
 *
 * \param importer Importer to use for import.
 * \param data Pointer to B-rep data to import.
 * \param size Size of data to import in bytes.
 * \return Result of B-rep import.
 * \version 7.0
 */
LI_NWC_PUBLIC LtNwcBRepImportResult LI_NWC_API
LiNwcBRepImporterLoadData(LtNwcBRepImporter importer,
                          void *data,
                          LtInt32 size);

/**
 * Import B-rep file.
 *
 * \param importer Importer to use for import.
 * \param filename File to import.
 * \return Result of B-rep import.
 * \version 7.0
 */
LI_NWC_PUBLIC LtNwcBRepImportResult LI_NWC_API
LiNwcBRepImporterLoadFile(LtNwcBRepImporter importer,
                          LtWideString filename);

/**
 * Returns the number of B-rep entities imported during the last operation.
 * This number is reset each time LoadData or LoadFile is called.
 *
 * \param importer Importer to query.
 * \return Number of entities imported during last operation.
 * \version 7.0
 */
LI_NWC_PUBLIC LtInt32 LI_NWC_API
LiNwcBRepImporterGetNumEntities(LtNwcBRepImporter importer);

/**
 * Returns a B-rep entity imported during the last operation.
 * The imported entities are reset each time LoadData or LoadFile is called.
 *
 * \param importer Importer to query.
 * \param index Index to B-rep entitiy to return.
 * \return Handle to imported B-rep entity.
 * \version 7.0
 */
LI_NWC_PUBLIC LtNwcBRepEntity LI_NWC_API
LiNwcBRepImporterGetEntity(LtNwcBRepImporter importer,
                           LtInt32 index);

/**
 * Returns any co-ordinate tolerance data read from the B-rep data.
 *
 * \param importer Importer to query.
 * \return Tolerance stored in imported data, if any. Zero will be returned if no tolerance found.
 * \version 7.0
 */
LI_NWC_PUBLIC LtFloat LI_NWC_API
LiNwcBRepImporterGetCoordTolerance(LtNwcBRepImporter importer);

/**
 * Returns the last error message.
 *
 * \param importer Importer to query.
 * \return Last error message generated by the importer.
 * \version 8.0
 */
LI_NWC_PUBLIC LtWideString LI_NWC_API
LiNwcBRepImporterGetErrorMessage(LtNwcBRepImporter importer);

/**
 * Destroys a B-rep importer.
 *
 * \param importer Importer to destroy.
 * \version 7.0
 */
LI_NWC_PUBLIC void LI_NWC_API
LiNwcBRepImporterDestroy(LtNwcBRepImporter importer);

#ifdef __cplusplus
}

/**
 * C++ wrapper around LtNwcBRepImporter API calls
 *
 * \see LiNwcBRepImporter.h
 */
class LcNwcBRepImporter
{
public:
   LcNwcBRepImporter(LtNwcBRepFormat format) : m_handle(LiNwcBRepImporterCreate(format)),
                                               m_own(true) {}

   LcNwcBRepImporter(LtNwcBRepImporter handle) : m_handle(handle),
                                                 m_own(false) {}

   ~LcNwcBRepImporter() { if (m_own) LiNwcBRepImporterDestroy(m_handle); }

   operator LtNwcBRepImporter () const { return m_handle; }
   LtNwcBRepImporter GetHandle() const { return m_handle; }

   void SetScale(LtFloat scale)
   { LiNwcBRepImporterSetScale(m_handle, scale); }

   void SetFlags(LtInt32 flags)
   { LiNwcBRepImporterSetFlags(m_handle, flags); }

   LtNwcBRepImportResult LoadData(void *data,
                                  LtInt32 size)
   { return LiNwcBRepImporterLoadData(m_handle, data, size); }

   LtNwcBRepImportResult LoadFile(LtWideString filename)
   { return LiNwcBRepImporterLoadFile(m_handle, filename); }

   LtInt32 GetNumEntities()
   { return LiNwcBRepImporterGetNumEntities(m_handle); }

   LtNwcBRepEntity GetEntity(LtInt32 index)
   { return LiNwcBRepImporterGetEntity(m_handle, index); }

   LtFloat GetCoordTolerance()
   { return LiNwcBRepImporterGetCoordTolerance(m_handle); }

   LtWideString GetErrorMessage()
   { return LiNwcBRepImporterGetErrorMessage(m_handle); }

private:
   // Can't copy
   LcNwcBRepImporter(const LcNwcBRepImporter&);
   LcNwcBRepImporter& operator= (const LcNwcBRepImporter&);

   LtNwcBRepImporter m_handle;
   bool m_own;
};

#endif

#endif // LINWCBREPIMPORTER_HDR
